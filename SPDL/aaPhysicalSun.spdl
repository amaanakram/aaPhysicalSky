# SPDL Generated by XSI Shader Wizard
SPDL
Version = "2.0.0.0";
Reference = "{B024CF1E-6911-4ed2-967A-221E0B763C53}";
PropertySet "aaPhysicalSun_pset"
{
	Parameter "out" output
	{
		GUID = "{0AE8A35D-6741-4a1d-A8A0-E2ED4C04D927}";
		Type = color;
		flags = 0;
	}
	Parameter "on" input
	{
		GUID = "{77BA5220-C26A-444e-BF72-1EAF60153762}";
		Type = boolean;
		Value = on;
		Texturable = on;
	}
	Parameter "turbidity" input
	{
		GUID = "{06E38AA6-EB49-4ae3-8DF5-2513E9068B70}";
		Type = scalar;
		Texturable = on;
		Value = 2.0;
	}
	Parameter "sunDirX" input
	{
		GUID = "{061F0626-89CC-46cd-A017-E22930B7D29C}";
		Type = scalar;
		Texturable = on;
		Value = 0.0 ;
	}
	Parameter "sunDirY" input
	{
		GUID = "{23517291-DECA-4842-8710-C318935B5E7E}";
		Type = scalar;
		Texturable = on;
		Value = 0.0 ;
	}
	Parameter "sunDirZ" input
	{
		GUID = "{48D8D006-72EB-4e09-AF20-8F292FC2FC82}";
		Type = scalar;
		Texturable = on;
		Value = 0.0 ;
	}
	Parameter "multiplier" input
	{
		GUID = "{61C24413-EC8A-4408-950F-9F3A28DECCCA}";
		Type = scalar;
		Texturable = on;
		Value = 1.0;
	}
	Parameter "exposure" input
	{
		GUID = "{905303D4-5718-4ec6-8A69-43317828A326}";
		Type = scalar;
		Value = 40.0;
		Texturable = on;
	}
}

MetaShader "aaPhysicalSun_declare"
{
	Name = "aaPhysicalSun";
	Type = light, light photon;
	Renderer "mental ray"
	{
		Name = "aaPhysicalSun";
	}
}
#phenomenon "aaPhysicalSun_declare"
#{
#	Name = "aaPhysicalSun";
#	Version = 1;
#	Use = environment;
#}

Defaults
{
	on
	{
		Name = "On";
	}
	turbidity
	{
		Name = "Haze";
		UIRange = 1.7 to 10.0; 
	}
	sunDirX
	{
		Name = "Direction X";
	}
	sunDirY
	{
		Name = "Direction Y";
	}
	sunDirZ
	{
		Name = "Direction Z";
	}
	multiplier
	{
		Name = "Multiplier";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}	
	exposure
	{
		Name = "Exposure";
		UIRange=0.00 to 500.0; 
	}
}

Layout "Default"
{
	#Group "Global Parameters"
	{
		on;
		exposure;
		multiplier;
		turbidity;
		Button PickLight = "Pick Infinite (Sun)Light";
		sunDirX;
		sunDirY;
		sunDirZ;
	}
}

Language = "JScript";
BeginScript 

function Op_Update(ctx, Out, InTrans)
{
   oTrans = InTrans.Value
   oM4 = oTrans.Transform.Matrix4
	vbArr = new VBArray( oM4.Get2() );
	oZ = vbArr.toArray();

   Application.LogMessage(Out.Name)
   if(Out.Name == 'Outvecx')
       Out.Value = oZ[8]
   else if(Out.Name == 'Outvecy')
       Out.Value = oZ[9]
   else if(Out.Name == 'Outvecz')
       Out.Value = oZ[10]
}
	
	function PickLight_OnClicked()
	{
		var rtn =  PickObject("Select Infinite Light", "Select Infinite Light");
		var out = rtn.Value("PickedElement");

		if(!out.IsClassOf(siLightID ))
			LogMessage("Please pick an Infinite Light", siWarning );
		else
		{
			var oObj = Dictionary.GetObject( out + ".sunDir", false )
			LogMessage(ClassName( oObj ))
			if( ClassName( oObj ) == "CustomProperty")
				DeleteObj(out +".sunDir");
			oProp = out.AddProperty('CustomProperty',false ,"sunDir");
			oX = oProp.AddParameter('vecx', 4);
			oY = oProp.AddParameter('vecy', 4);
			oZ = oProp.AddParameter('vecz', 4);

			oScop = XSIFactory.CreateScriptedOp ("Op", "", "JScript");
			oScop.AddOutputPort(oX);
			oScop.AddOutputPort(oY);
			oScop.AddOutputPort(oZ);
			oScop.AddInputPort(out.Kinematics.Global,'InTrans');
			oScop.Alwaysevaluate = 1;
			oScop.Code = Op_Update.toString();
			oScop.Connect();
			SetExpr("Passes." + GetCurrentPass().Name + ".aaPhysicalSun.sunDirX", out + ".sunDir.vecx", null);
			SetExpr("Passes." + GetCurrentPass().Name + ".aaPhysicalSun.sunDirY", out + ".sunDir.vecy", null);
			SetExpr("Passes." + GetCurrentPass().Name + ".aaPhysicalSun.sunDirZ", out + ".sunDir.vecz", null);
			
		}
	}
EndScript

